from __future__ import annotations
import pandas as pd


class Collection(pd.DataFrame):
    """
    **Collection is a set of homogenous objects retrieved from a repository**

    Collection can be further queried, ordered and split (as a DataFrame).
    It can also be combined with another Collection using set operations.


    .. note::
        - Collection is essentially DataFrame with some overrides and added functionality.
        - Most of the methods here work on the cached data, except retrieve_* and display
    """
    _metadata = []

    def __init__(self, data: dict) -> None:
        super().__init__(data)

    @property
    def _constructor(self):
        return Collection

    def show_stats(self) -> None:
        """
        **Can be used to show stats about the collection in notebook**
        """
        pass

    def display(self,
                show_bounding_boxes: bool = False,
                show_segmentation: bool = False) -> None:
        """
        **Can be used to render the objects in the collection pictorially in notebook**
        """
        pass

    def update_properties(self,
                          related_collection) -> bool:
        """
        Propagate changes back to the DB.

        .. note::
            - The related_collection needs to be of same length as the Collection.


        Args:
            related_collection (_type_): _description_

        Returns:
            bool: _description_
        """
        pass

    def __add__(self, other: Collection) -> Collection:
        """
        Append elements of a collection to another

        Args:
            other (Collection): _description_

        Returns:
            Collection: A new collection after appending.
        """
        return Collection(pd.concat([self, other]))

    def __sub__(self, other: Collection) -> Collection:
        """
        Remove elements from first collection that are in second, ignore the rest.

        Args:
            other (Collection): _description_

        Returns:
            Collection: A new collection after the operation.
        """
        return self[self["_uniqueid"].isin(other["_uniqueid"]) == False]

    def __and__(self, other: Collection) -> Collection:
        """
        Find elements that are in both first and second collections.

        Args:
            other (_type_): _description_
        """
        return self.merge(other)

    def __xor__(self, other: Collection) -> Collection:
        """
        Exlusive OR on 2 collections.

        Args:
            other (_type_): _description_

        Returns:
            _type_: _description_
        """
        return (self + other).drop_duplicates() - (self & other)

    def convert_export(self, root: str) -> int:
        """**Saves the collection into the path specified**

        Args:
            root (str): path to save collection at

        Returns:
            int: Status to indicate the outcome of export.
        """
        pass

    def convert_import(self, root: str) -> int:
        """**Imports the collection that has been generated by another instance**

        Args:
            root (str): path where the exported dataset exists.

        Returns:
            int: Status to indicate the outcome of import
        """
        pass

    def retrieve_similar(self, set: str, neigbour_count: int) -> Collection:
        """
        Retrieve a collection that has least distance from each of the images in this collection

        Args:
            set (str): The Descriptor set.
            neigbour_count (int): The number of neigbours to include in the result.

        Returns:
            Collection: A new collection of images that comprises of nearest neigbours to this collection.
        """
        pass

    def retrieve_by_connection(self, constraint) -> Collection:
        """
        Retrieve a list of connected objects to each object in this collection, with a specified constraints.

        The constraint could be like class == Person.

        Args:
            constraint (Constraints): A criteria to restrict outcomes.

        Returns:
            Collection: A collection of apertureDB objects that fulfill the constraints as a collection.
        """
        pass
