from typing import Dict, Optional
from aperturedb.OM.Dataset import Dataset
from aperturedb.OM.Entity import Entity
from aperturedb import Connector


class Repository:
    """**This is repository interface.**

    
    Repository can be thought of as a homogenous store of entities

    Notes:
        This interface tries to match pytorch's Dataset interface.
        Ideally, there should be a way to convert to/from pytorch dataset into Data in aperturedb.
    
    Example::
    
        dataset = Repository.filter(constrints)
        rectangles, labels = pytorch.infer(dataset)
        dataset.add_BoundingBoxes(rectangles, labels)
    """

    def __init__(self, db: Connector) -> None:
        self._object_type = "Entity"
        self._db = db

    def get(self, id) -> Entity:
        """**Get an Entity from a repository**

        Get a unique Object from the database by it's uniqueid property.

        Args:
            id (_type_): The id to uniquely identify an entity.

        Returns:
            Entity: The Entity managed by this reposotory.

        Retrieve an Image::

            from aperturedb import Connector, Images
            db_connector = Connector.Connector(user="admin", password="admin")
            images = Images.Images(db_connector)
            image = image.get(id=92)

        """
        pass

    def filter(self, constraints, operations, format) -> Dataset[Entity]:
        """**Restrict the number of entities based on ctriteria**

        A new search will throw away the results of any previous search
        Without any constraints the method acts as find_all

        Args:
            constraints: The criteria for search, optional
            operations: Operations before returning the list, optional
            format: Encoding format
        """
        pass

    def create_new(self, properties, operations) -> None:
        """**Create a new entity.**

        A Create new function discards all previous information.
        All of the arguments are optional.

        Args:
            properties (dict): A collection of arbitrary key value pairs associated with this object
            operations (List[dict]): A list of operations to be aplpied on the entity before persisting it.
            blob (Bytestring): An in-memory representation of data for the image.
            rectangle (Dict): A dcit representing a rectangle.
            eclass (str): A class associated with generic repository.

        Example::

            with open(path, "rb") as instream:
                img_data = instream.read()
                self.images.create_new(
                    properties={
                        "description" : "A first class image",
                        "timestamp": str(datetime.now()),
                        "path": path
                    },
                    operations=[],
                    blob=img_data)
                image = self.images.save()

        Testing a non block.
        """
        pass

    def find_similar(self, sample) -> Dataset[Entity]:
        """**Get entities similar to the sample**
        
        This will return a set of entities that are similar to the input simple.

        Args:
            sample (_type_): The example input to be compared against.
        """
        pass

    def dataset_export(self, root: str) -> int:
        """**Saves the collection into the path specified**

        Args:
            root (str): path to save collection at
        
        Returns:
            int: Status to indicate the outcome of export.
        """
        pass

    def dataset_import(self, root: str) -> int:
        """**Imports the collection that has been generated by another instance**

        Args:
            root (str): path where the exported dataset exists.

        Returns:
            int: Status to indicate the outcome of import
        """
        pass

